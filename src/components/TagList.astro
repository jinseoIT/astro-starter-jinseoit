---
import { GetTags } from "../utils/content";
import type { CollectionEntry } from "astro:content";
import TagButton from "./TagButton.astro";
import PostList from "./PostList.astro";
import LoadingIndicator from "./LoadingIndicator.astro";

interface Props {
  allPosts?: CollectionEntry<"posts">[];
  initialTag?: string;
}

const { allPosts = [], initialTag } = Astro.props;
const tags = await GetTags();

// 태그별 포스트 개수 계산
const tagCounts = new Map<string, number>();
allPosts.forEach((post) => {
  post.data.tags?.forEach((tag) => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
  });
});

// 포스트별 태그 정보만 추출 (최소한의 데이터)
const postsTags = allPosts.map((post) => ({
  id: post.id,
  tags: post.data.tags || [],
}));
---

<ul
  class="scrollbar-hide border-theme-border bg-theme-bg-secondary mb-6 flex gap-2 overflow-x-auto border px-5 py-2"
  id="tag-list"
>
  <li class="bg-theme-bg flex-shrink-0 rounded-2xl px-4 py-1.5">
    <TagButton tag="all" count={allPosts.length} />
  </li>
  {
    tags.map((tag) => (
      <li class="bg-theme-bg flex-shrink-0 rounded-2xl px-4 py-1">
        <TagButton tag={tag.name} count={tagCounts.get(tag.name) || 0} />
      </li>
    ))
  }
</ul>

<div id="posts-container" data-initial-tag={initialTag || ""}>
  <PostList posts={allPosts} />
  <LoadingIndicator hidden={true} />

  <!-- Intersection Observer를 위한 감지 요소 -->
  <div id="intersection-observer" class="h-1 w-full"></div>
</div>

<script>
  import {
    initializeState,
    setupEventListeners,
    setupIntersectionObserver,
    setupImageLoading,
    cleanup,
  } from "../utils/tagListLogic.js";

  // 초기화
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      const postsContainer = document.querySelector("#posts-container");
      const initialTag = postsContainer?.getAttribute("data-initial-tag") || "";

      initializeState(initialTag);
      setupEventListeners();
      setupIntersectionObserver();
      setupImageLoading();
    });
  } else {
    const postsContainer = document.querySelector("#posts-container");
    const initialTag = postsContainer?.getAttribute("data-initial-tag") || "";

    initializeState(initialTag);
    setupEventListeners();
    setupIntersectionObserver();
    setupImageLoading();
  }

  // 메모리 정리 (페이지 언로드 시)
  window.addEventListener("beforeunload", cleanup);
</script>

<style>
  /* View Transitions API 스타일 - Tailwind로 대체 불가능 */
  .post-item {
    view-transition-name: post-item;
    animation: slide-up 0.3s ease-out;
    will-change: opacity, transform;
  }

  .post-item.hidden {
    animation: fade-out 0.2s ease-in;
  }

  @keyframes fade-out {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  /* line-clamp 유틸리티 - Tailwind로 대체 불가능 */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* 캐시된 이미지가 있을 때 스켈레톤 즉시 숨김 */
  .post-item img[style*="opacity: 1"] ~ .image-skeleton,
  .post-item img.loaded ~ .image-skeleton,
  .post-item img[style*="opacity: 1"] + .image-skeleton,
  .post-item img.loaded + .image-skeleton {
    display: none !important;
  }

  /* 브라우저 캐시된 이미지의 경우 스켈레톤 숨김 */
  .post-item img[complete="true"] ~ .image-skeleton {
    display: none !important;
  }
</style>
